n = int(input())
czy_pierwsza = [True] * (n + 1)
p = 2
while p * p <= n:
    if czy_pierwsza[p]:
        for i in range(p * p, n + 1, p):
            czy_pierwsza[i] = False
    p += 1
liczby_pierwsze = []
for i in range(2, n + 1):
    if czy_pierwsza[i]:
        liczby_pierwsze.append(i)

print(len(liczby_pierwsze))
print(sum(liczby_pierwsze))





def wyszukiwanie_binarne(t, a):
    lewy, prawy = 0, len(t) - 1
    while lewy <= prawy:
        srodek = (lewy + prawy) // 2
        if t[srodek] == a:
            return True
        elif t[srodek] < a:
            lewy = srodek + 1
        else:
            prawy = srodek - 1
    return False

def sprawdz_uporzadkowanie(t):
    for i in range(1, len(t)):
        if t[i] < t[i - 1]:
            return False
    return True

# Wczytanie ciągu liczb
t = list(map(int, input("Podaj 10 liczb uporządkowanych niemalejąco: ").split()))

# Sprawdzenie, czy ciąg jest uporządkowany niemalejąco
if len(t) != 10 or not sprawdz_uporzadkowanie(t):
    print("Ciąg musi być uporządkowany niemalejąco")
else:
    # Wczytanie liczby a
    a = int(input("Podaj liczbę, której szukasz: "))

    # Wykorzystanie wyszukiwania binarnego
    if wyszukiwanie_binarne(t, a):
        print("tak")
    else:
        print("nie")










def wyszukiwanie_binarne_rekurencyjne(t, a, lewy, prawy):
    if lewy > prawy:
        return False
    srodek = (lewy + prawy) // 2
    if t[srodek] == a:
        return True
    elif t[srodek] < a:
        return wyszukiwanie_binarne_rekurencyjne(t, a, srodek + 1, prawy)
    else:
        return wyszukiwanie_binarne_rekurencyjne(t, a, lewy, srodek - 1)

def sprawdz_uporzadkowanie(t):
    for i in range(1, len(t)):
        if t[i] < t[i - 1]:
            return False
    return True

t = list(map(int, input("Podaj 10 liczb uporządkowanych niemalejąco: ").split()))

if len(t) != 10 or not sprawdz_uporzadkowanie(t):
    print("Ciąg musi być uporządkowany niemalejąco")
else:
    a = int(input("Podaj liczbę, której szukasz: "))

    if wyszukiwanie_binarne_rekurencyjne(t, a):
        print("tak")
    else:
        print("nie")






def wyszukiwanie_binarne(t, a):
    lewy, prawy = 0, len(t) - 1
    while lewy <= prawy:
        srodek = (lewy + prawy) // 2
        if t[srodek] == a:
            return True
        elif t[srodek] < a:
            lewy = srodek + 1
        else:
            prawy = srodek - 1
    return False


def sprawdz_uporzadkowanie(t):
    for i in range(1, len(t)):
        if t[i] < t[i - 1]:
            return False
    return True


# Odczytanie pliku ciagi.txt
try:
    with open('C:/Users/spide/OneDrive/Pulpit/Technikum/INformatyka/klasa 3/ciagi.txt', 'r') as plik:
        linie = plik.readlines()

    # Sprawdzanie każdego ciągu
    for linia in linie:
        # Konwersja linii tekstu na listę liczb całkowitych
        ciag = list(map(int, linia.split()))

        # Sprawdzenie, czy ciąg jest uporządkowany niemalejąco
        if sprawdz_uporzadkowanie(ciag):
            # Wykorzystanie wyszukiwania binarnego do sprawdzenia obecności liczby 10
            if wyszukiwanie_binarne(ciag, 10):
                print(" ".join(map(str, ciag)))
        else:
            print("Ciąg musi być uporządkowany niemalejąco")

except FileNotFoundError:
    print("Plik ciagi.txt nie został znaleziony.")
except ValueError:
    print("W pliku ciagi.txt muszą znajdować się tylko liczby całkowite.")
















